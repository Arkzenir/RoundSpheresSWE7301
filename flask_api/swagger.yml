# swagger.yml

openapi: 3.0.0
info:
  title: "Scientific Flask REST API"
  description: "An API for interacting with the scientific database"
  version: "1.4.0"

servers:
  - url: "/api"

components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: auth.decode_token

  schemas:

    UserCredentials:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    
    Sci:
      type: "object"
      properties:
        id:
          type: "integer"
          nullable: true  # optional in POST requests.
        date:
          type: "string"
        time:
          type: "string"
        time_offset:
          type: "integer"
        coordinate: 
          type: "array"
          items:
            type: "number"
        air_temperature:
          type: "number"
        humidity:
          type: "number"
        wind_speed:
          type: "number"
        wind_direction:
          type: "number"
        precipitation:
          type: "number"
        haze:
          type: "number"
        water_temperature:
          type: "number"
        notes:
          type: "string"
  parameters:
    id:
      name: "id"
      description: "Unique id of the record to get"
      in: path
      required: True
      schema:
        type: "integer"

paths:

  /auth/register:
    post:
      operationId: auth.register
      tags:
        - Authentication
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        201:
          description: User created successfully
        400:
          description: Invalid request

  /auth/login:
    post:
      operationId: auth.login
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        200:
          description: Login successful
        401:
          description: Invalid credentials


  /sci_record:
    get:
      operationId: "sci_record.read_all"
      tags:
        - Sci
      summary: "Get all scientific data"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Successfully read scientific record table"
    post:
      security:
        - bearerAuth: []
      operationId: "sci_record.create"
      tags:
        - Sci
      summary: "Create a scientific record"
      requestBody:
          description: "Record to create"
          required: True
          content:
            application/json:
              schema:
                x-body-name: "sci_record"
                $ref: "#/components/schemas/Sci"
      responses:
        "201":
          description: "Successfully created record"
    delete:
      security:
        - bearerAuth: []
      operationId: "sci_record.delete_all"
      tags:
        - Sci
      summary: "Delete all records"
      description: "Deletes all scientific records in the database"
      responses:
        "204":
          description: "Successfully deleted all records"
  /sci_record/{id}:
    get:
      security:
        - bearerAuth: []
      operationId: "sci_record.read_one"
      tags:
        - Sci
      summary: "Read one record"
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: "Successfully read record with id"
    put:
      security:
        - bearerAuth: []
      tags:
        - Sci
      operationId: "sci_record.update"
      summary: "Update a record"
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: "Successfully updated record"
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: "sci_record"
              $ref: "#/components/schemas/Sci"
    delete:
      security:
        - bearerAuth: []
      tags:
        - Sci
      operationId: "sci_record.delete"
      summary: "Delete a record"
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "204":
          description: "Successfully deleted record"